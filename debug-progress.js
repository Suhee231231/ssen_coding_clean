const mysql = require('mysql2/promise');

async function debugProgress() {
    let connection;
    
    try {
        // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞
        connection = await mysql.createConnection({
            host: 'localhost',
            user: 'root',
            password: '6305rpqkfk**',
            database: 'coding_problems',
            charset: 'utf8mb4'
        });
        
        console.log('=== ÏßÑÌñâ ÏÉÅÌô© Ï∂îÏ†Å ÎîîÎ≤ÑÍπÖ ===');
        
        // 1. ÏÇ¨Ïö©Ïûê ÌÖåÏù¥Î∏î ÌôïÏù∏
        console.log('\nüë• ÏÇ¨Ïö©Ïûê Î™©Î°ù:');
        const [users] = await connection.execute('SELECT id, username, is_admin FROM users');
        users.forEach(user => {
            console.log(`- ID: ${user.id}, ÏÇ¨Ïö©ÏûêÎ™Ö: ${user.username}, Í¥ÄÎ¶¨Ïûê: ${user.is_admin}`);
        });
        
        // 2. Í≥ºÎ™© ÌÖåÏù¥Î∏î ÌôïÏù∏
        console.log('\nüìö Í≥ºÎ™© Î™©Î°ù:');
        const [subjects] = await connection.execute('SELECT id, name FROM subjects ORDER BY id');
        subjects.forEach(subject => {
            console.log(`- ID: ${subject.id}, Ïù¥Î¶Ñ: ${subject.name}`);
        });
        
        // 3. Î¨∏Ï†ú ÌÖåÏù¥Î∏î ÌôïÏù∏
        console.log('\n‚ùì Î¨∏Ï†ú Î™©Î°ù:');
        const [problems] = await connection.execute(`
            SELECT p.id, p.subject_id, s.name as subject_name, p.question 
            FROM problems p 
            JOIN subjects s ON p.subject_id = s.id 
            ORDER BY p.subject_id, p.id
        `);
        problems.forEach(problem => {
            console.log(`- ID: ${problem.id}, Í≥ºÎ™©: ${problem.subject_name} (${problem.subject_id}), Î¨∏Ï†ú: ${problem.question.substring(0, 50)}...`);
        });
        
        // 4. ÏßÑÌñâ ÏÉÅÌô© ÌÖåÏù¥Î∏î ÌôïÏù∏
        console.log('\nüìà ÏßÑÌñâ ÏÉÅÌô© ÌÖåÏù¥Î∏î:');
        const [userProgress] = await connection.execute('SELECT * FROM user_progress');
        console.log(`- user_progress: ${userProgress.length}Í∞ú Î†àÏΩîÎìú`);
        userProgress.forEach(progress => {
            console.log(`  - ÏÇ¨Ïö©Ïûê: ${progress.user_id}, Î¨∏Ï†ú: ${progress.problem_id}, ÎãµÏïà: ${progress.selected_answer}, Ï†ïÎãµ: ${progress.is_correct}`);
        });
        
        const [subjectProgress] = await connection.execute('SELECT * FROM user_subject_progress');
        console.log(`- user_subject_progress: ${subjectProgress.length}Í∞ú Î†àÏΩîÎìú`);
        subjectProgress.forEach(progress => {
            console.log(`  - ÏÇ¨Ïö©Ïûê: ${progress.user_id}, Í≥ºÎ™©: ${progress.subject_id}, ÎßàÏßÄÎßâ Î¨∏Ï†ú: ${progress.last_problem_id}`);
        });
        
        // 5. ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏
        console.log('\nüîß ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏:');
        const [userProgressColumns] = await connection.execute('DESCRIBE user_progress');
        console.log('- user_progress ÌÖåÏù¥Î∏î Íµ¨Ï°∞:');
        userProgressColumns.forEach(col => {
            console.log(`  - ${col.Field}: ${col.Type} ${col.Null === 'YES' ? 'NULL' : 'NOT NULL'}`);
        });
        
        const [subjectProgressColumns] = await connection.execute('DESCRIBE user_subject_progress');
        console.log('- user_subject_progress ÌÖåÏù¥Î∏î Íµ¨Ï°∞:');
        subjectProgressColumns.forEach(col => {
            console.log(`  - ${col.Field}: ${col.Type} ${col.Null === 'YES' ? 'NULL' : 'NOT NULL'}`);
        });
        
    } catch (error) {
        console.error('‚ùå Ïò§Î•ò Î∞úÏÉù:', error);
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}

debugProgress(); 